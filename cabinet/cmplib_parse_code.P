%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% CONCERNS:
%% in the event that the user doesnt fail all the way through the options, tree handles may be left open
%% this is obviosuly bad, it would be better to either have one handle always open per index (really ideal) or
%% have the handle close after each call is finished (impossible? and less ideal)
%% parse_directive(import(as(from(PredIn/ArityIn, DBName),btree), _QrList,SymTab,ModName,ModStruct)) :-
%%   parse_directive(import(as(from(PredIn/ArityIn, DBName),btree(1))), _QrList,SymTab,ModName,ModStruct)
parse_directive(import(as(from(PredIn/ArityIn, DBName),btree(IndexonIn))), _QrList,SymTab,ModName,ModStruct) :- !,
  consult:consult(bt),
  consult:consult(xsb_hook),
  %% initialize the B+ Tree
  (
    bt:btinit(DBName, Handle) 
    ; (
      bt:btcreate(DBName, PredIn/ArityIn, IndexonIn),
      bt:btinit(DBName, Handle)
    )
  ),
  %% check that the arity is a match
  bt:btarity(Handle, Arity),
  (
    ArityIn = Arity 
      -> true 
      ; misc_error(('Arity Mismatch (Expecting: ', Arity, ' got ', ArityIn, ')'))
  ),
  %% check the indexon is a match
  bt:btindexon(Handle, Indexon),
  (
    IndexonIn = Indexon
      -> true 
      ; misc_error(('Indexon Mismatch (Expecting: ', Indexon, ' got ', IndexonIn, ')'))
  ),
  %% get the real name it is stored with
  bt:btpredname(Handle, PredName),
  %% we can close this handle, unfortunetly at this time we have to reopen a connection everytime we query
  bt:btclose(Handle),
  %% create a blank list of variables
  basics:length(ArgList, Arity),
  % get the index on argument
  basics:ith(Indexon, ArgList, IndexVar),
  %% create the head of the rule
  RuleHead =.. [PredIn|ArgList],
  %% assert a predicate to respond to queries against this variable.
  Rule = 
  (
    RuleHead :- 
      % determine if its bound or not
      var(IndexVar) ->
      (
        %% UNBOUNDED CALL, USE BT_GETALL
        %% open a database connection
        bt:btinit(DBName, Handle2),
        (
          (
            bt:btgetall(Handle2, Result),
            Result =.. [PredName|ArgList]
          )
          ; (
            standard:writeln(close),
            bt:btclose(Handle2), !, BOUNDED
          )
        )
      )  ;
      (
        %% fail CALL, USE BT_GET
        %% open a database connection
        bt:btinit(DBName, Handle2),
        (
          bt:btget(Handle2, IndexVar, Result) 
          ; (
            standard:writeln(close),
            bt:btclose(Handle2), !, fail
          )
        ),
        Result =.. [PredName|ArgList]
      )
  ),
  parse_clause(Rule, ModStruct, ModName),
  %% Next, assert a predicate to handle assertions
  string:concat_atom(['indexhook_', PredName, '_', Arity, '_', Indexon, '_'], HookName),
  AHookHead =.. [HookName,p(A,B,C)],
  AddHookCallable =.. [HookName,_],
  ActualHookBinding =.. [xsb_assert_hook, AddHookCallable],
  AHook =
  (
    AHookHead :- 
      standard:writeln('dynassert'),
      btinit(DBName, Handle3), 
      btinsert(Handle3, p(A,B,C)), 
      btclose(Handle3), 
      fail
  ),
  standard:writeln(AHook),
  parse_clause(AHook, ModStruct, ModName),
  AddHookRule = 
  (
    ':-'
    (
      xsb_hook:add_xsb_hook(ActualHookBinding)
    )
  ),
  parse_clause(AddHookRule, ModStruct, ModName)
  .

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%