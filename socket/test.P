:- import socket/2, socket_bind/3, socket_listen/3, socket_accept/3, socket_getL/3, socket_getS/3, socket_get0/3 from socket.

<<<<<<< HEAD
server() :- server(99, _, _).
server(Port, ServerSocket, ConnectionSocket) :- 
	socket(ServerSocket, _SocketError),
	socket_bind(ServerSocket, Port, _BindError),
	socket_listen(ServerSocket, 1000, _ConnectError),
	socket_accept(ServerSocket, ConnectionSocket, _SocketError),
	recv_handshakeInit(ConnectionSocket).


recv_handshakeInit(Socket) :-	
	opcode(ExOpcode, 'OP_HS_INIT'),
	socket_getS(Socket, Opcode, Error),
	check_opcode(ExOpcode, Opcode)
	->
		socket_getL(Socket, MessageLength, Error),
		socket_get0N(Socket, MessageLength, MachineName),
		write('Machine Name: '), writeln(MachineName)
	.


%% loads a String of lenth N from the Socket provided
socket_get0N(Socket, N, Buffer) :-
	socket_get0N_inner(Socket, N, Buf),
	atom_codes(Buffer, Buf).

socket_get0N_inner( _ , 0, []).
socket_get0N_inner(Socket, N, [Char | Buffer]) :-
	socket_get0(Socket, Char, _Error),
	NL is N - 1,
	socket_get0N_inner(Socket, NL, Buffer).

%% Checks if the opcode provided matches the expected op code.
%% if it does not, a message is printed and the call fails.
check_opcode(Expected, Actual) :-
	Expected = Actual 
	->
		true 
	;
		opcode(Expected, SExpected),
		opcode(Actual, SActual),
		write('Invalid Opcode Recieved, expecting '), write(SExpected), write(', got '), write(SActual), writeln('.'),
		fail
	.

opcode(1, 'OP_HS_INIT') 	:- !.
opcode(_, 'UNKNOWN') 		:- !.
=======
:- [socket].
?- [socket].


open_socket(Port, ServerSocket, ConnectionSocket) :- 
	socket(ServerSocket, _SocketError),
	socket_bind(ServerSocket, Port, _BindError),
	socket_listen(ServerSocket, 1000, _ConnectError),
	socket_accept(ServerSocket, ConnectionSocket, _SocketError).

server_start(Port) :-
	socket(ServerSocket, _SocketError),
	socket_bind(ServerSocket, Port, _BindError),
	socket_listen(ServerSocket, 1000, _ConnectError),
	socket_accept(ServerSocket, ConnectionSocket, _SocketError),
	waitingState(ConnectionSocket).


waitingState(Client) :-
	writeln('Server Entering Waiting State.'),
	socket_recv(Client, Message, _RecvError),
	% Look at the first character of the socket message, that is the opcode
	
>>>>>>> f6c7c2a6c0d1badb247d0dc148b3b58db2d5d42f
