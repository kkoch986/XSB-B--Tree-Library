%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% A script to parse the file part-of-speech.txt
%% and insert it into a B+ Tree for word/2.
%% THe script times itself and reports the timings
%% upon completion
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% USAGE:
%% The file part-of-speech.txt should be 
%% a text file with the following format:
%% word 	<PARTS Of SPEECH>
%% or 
%% word 	| <PARTS OF SPEECH>
%% See http://wordlist.sourceforge.net/pos-readme
%% for more information
%%
%% To process, simply consult this file and run:
%% ?- btprofile.
%%
%% See the B+ Tree Readme for info on retrieval
%% of the data from the B+ Tree.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% By Ken Koch 05/2012
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
?- [bt_p].

:- import tphrase_set_string/1, tphrase_string_length/1 from dcg.
:- import scan/2, scan/3, set_scan_pars/1 from stdscan.
:- import append/3 from basics.


printc :- 'C'(X, Y, _), write(X), write(': '), writeln(Y), fail; true.

scan_file(Filename,Length) :-
	(atom(Filename)
	 ->	expand_filename(Filename,Afile),
		seeing(Ofile),
		see(Afile),
		file_to_string(String,[]),
		seen,
		see(Ofile),
		set_string(String,Length)
	 ;	writeln('Error in file name.'),
		writeln('Did you forget to put single quotes around the filename?')
	).

file_to_string(Li,Lo) :-
	get0(C),
	(C < 0	% end-of-file
	 ->	Li = Lo
	 ;	Li = [C|Lm],
		file_to_string(Lm,Lo)
	).

set_string(String,Length) :-
	abolish_all_tables,
	set_scan_pars(
		[
			whitespace("|"), 
			letter(" "), 
			letter("'"),
			letter("."),
			letter("-"), 
			letter("/"), 
			no_whitespace,
			no_case_in_lit,
			no_case
		]
	),
	scan(String, 10, Words),
	tphrase_set_string(Words),
	tphrase_string_length(Length).

parse(In, [], Out) :- OutTest is In + 1, Out @< OutTest, !.
parse(In, OutWords, Out) :-
	In2 is In + 1,
	'C'(In, Token, In2),  
	Token = [InnerWord | [POS | []]],
	atom_codes(POS, POSList),
	break_into_words(InnerWord, POSList, Words), 
	parse(In2, OtherWords, Out), 
	append(Words, OtherWords, OutWords), !.
parse(In, [Token|OtherWords], Out) :- 
	Token = [],
	OutTest is In +1, 
	parse(OutTest, OtherWords, Out).

break_into_words( _ , [], []).
break_into_words(Token, [POS|NPOS], [Word | Words]) :-
	poschar(POS, POSWord),
	Word = word(POSWord, Token),
	%write('Word: '), write(POSWord), write(', '), writeln(Token),
	break_into_words(Token, NPOS, Words).

poschar(78 , 'noun') :- !.
poschar(80 , 'plural') :- !.
poschar(104, 'nounphrase') :- !.
poschar(86 , 'verb') :- !.
poschar(116, 'transitive_verb') :- !.
poschar(105, 'intransitive_verb') :- !.
poschar(65 , 'adjective') :- !.
poschar(118, 'adverb') :- !.
poschar(67 , 'conjunction') :- !.
poschar(112, 'preposition') :- !.
poschar(33 , 'interjection') :- !.
poschar(114, 'pronoun') :- !.
poschar(68 , 'definite_article') :- !.
poschar(73 , 'indefinite_article') :- !.
poschar(111, 'nominative') :- !.
poschar(_, 'Unknown') :- !.


%% Build a B+ Tree with the words....
build_tree(Words, IndexOn) :- 
	btinit(word/2, IndexOn, Handle), 
	% write('OUTPUT: '), writeln(Words),
	insert_values(Words, Handle),
	btclose(Handle).

insert_values([], _ ).
insert_values([[]|Words], Handle ) :- insert_values(Words, Handle).
insert_values([Word|Words], Handle) :-
	Word \== [],
	btinsert(Handle, Word),
	insert_values(Words, Handle).

btprofile :- 
	cputime(StartScan), 
	scan_file('part-of-speech.txt', X),
	write('File Scanned, Words: '), writeln(X), 
	cputime(StartParse),
	parse(0, Words, X),
	cputime(StartBuild),
	build_tree(Words, 1), 
	cputime(End), 
	BuildTime is End - StartBuild,
	ScanTime is StartParse - StartScan,
	ParseTime is StartBuild - StartParse,
	write('Scanning Time:'), writeln(ScanTime), 
	write('Parsing Time: '), writeln(ParseTime),
	write('B+ Tree Time: '), writeln(BuildTime).
