queryrule(X,T,Y,A,K) :- att(X,title,T),att(X,year,Y),att(X,author,A), att(X,key,K).

measureTime(Q, T, WT) :-
    walltime(WT0),
	cputime(T0),
	call(Q),
	cputime(T1),
	walltime(WT1),
	T is T1 - T0,
	WT is WT1 - WT0.

test() :- 
    open('result.txt', append, Output),
	measureTime(load_dyn('dblp.data'), LoadT, LoadWT),
	measureTime((queryrule(_,_,'1994',_,_), fail; true), T, WT),
	measureTime((queryrule(_,_,'1994',_,_), fail; true), T2, WT2),
	TotalTimeT is LoadT + T + T2, TotalTimeWT is LoadWT + WT + WT2,
	writeln(Output, '---------------------------------------------'), 
    writeln(Output, '------------- Load Dyn, to assert. ----------'), 
	write(Output, 'loading cputime:  '), writeln(Output, LoadT),
	write(Output, 'loading walltime: '), writeln(Output, LoadWT),
	write(Output, 'computing cputime:  '), writeln(Output, T),
	write(Output, 'computing walltime: '), writeln(Output, WT),
	write(Output, 'second query cputime:  '), writeln(Output, T2),
	write(Output, 'second query walltime: '), writeln(Output, WT2),
	write(Output, 'total cputime: '), writeln(Output, TotalTimeT),
	write(Output, 'total walltime: '), writeln(Output, TotalTimeWT),
	writeln(Output, '---------------------------------------------'), 
	flush_output(Output),
	close(Output).

?- ['../../bt'], ['../../bt_p'].
testbtcreate() :-
    open('result.txt', append, Output),
    %% drop any old b tree for paper/5.
    btdrop(paper/5, 3),
	%% Load Dyn the file and assert to so we can use queryrule/5
	measureTime(load_dyn('dblp.data'), LoadT, LoadWT),
	%% open the B+ Tree
    measureTime(btinit(paper/5, 3, Handle), InitT, InitWT),
	%% Build the B+ Tree with all of the rules from query rule.
	measureTime((buildtree(Handle), btclose(Handle)), BuildingT, BuildingWT),
	%%ReinitT = 0, ReinitWT = 0, QueryT = 0, QueryWT = 0,
	%% print out the results
	writeln(Output, '---------------------------------------------'), 
    writeln(Output, '-- Load Dyn, to assert and create B+ Tree. --'), 
	write(Output, 'initializing cputime:  '), writeln(Output, InitT),
	write(Output, 'initializing wallitme: '), writeln(Output, InitWT),
	write(Output, 'loading cputime:  '), writeln(Output, LoadT),
	write(Output, 'loading walltime: '), writeln(Output, LoadWT),
	write(Output, 'building tree cputime:  '), writeln(Output, BuildingT),
	write(Output, 'building tree walltime: '), writeln(Output, BuildingWT),
	writeln(Output, '---------------------------------------------'), 
	TotalBuildTimeT is InitT + LoadT + BuildingT,
	TotalBuildTimeWT is InitWT + LoadWT + BuildingWT,
	write(Output, 'Total Building cputime:  '), writeln(Output, TotalBuildTimeT),
	write(Output, 'Total Building wallitme: '), writeln(Output, TotalBuildTimeWT),
	writeln(Output, '---------------------------------------------'), 
	flush_output(Output),
	close(Output).

testbtquery() :- 
	%% now try and make a query into the B+ tree
	measureTime(btinit(paper/5, 3, Handle2), ReinitT, ReinitWT),
	measureTime((btget(Handle2, '1994', _ ) , fail ; true), QueryT, QueryWT),
	%% write out the results
	open('result.txt', append, Output),
	writeln(Output, '---------------------------------------------'), 
	writeln(Output, 'Load and Query B+ Tree for all Papers in a year'), 
	write(Output, 'reinitializing cputime:  '), writeln(Output, ReinitT),
	write(Output, 'reinitializing wallitme: '), writeln(Output, ReinitWT),
    write(Output, 'querying cputime:  '), writeln(Output, QueryT),
	write(Output, 'querying wallitme: '), writeln(Output, QueryWT),
	writeln(Output, '---------------------------------------------'), 
	TotalQueryTimeT is ReinitT + QueryT,
	TotalQueryTimeWT is ReinitWT + QueryWT,
	write(Output, 'Total Querying cputime:  '), writeln(Output, TotalQueryTimeT),
	write(Output, 'Total Querying wallitme: '), writeln(Output, TotalQueryTimeWT),
	writeln(Output, '---------------------------------------------'), 
	flush_output(Output),
	close(Output).

buildtree(Handle) :- 
	(
		Y = '2004',
		queryrule(X,T,Y,A,K), 
		btinsert(Handle, paper(X,T,Y,A,K)),
		fail 
		; true
	).
	


