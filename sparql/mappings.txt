% ------------------------------------------------------------------------------------
% --- QUERY #4  ----------------------------------------------------------------------
% ------------------------------------------------------------------------------------
% SELECT ?product ?label 
% WHERE { 
%     { ?product rdfs:label ?label . 
%       ?product rdf:type %ProductType% . 
%       ?product bsbm:productFeature %ProductFeature1% . 
%       ?product bsbm:productFeature %ProductFeature2% . 
%       ?product bsbm:productPropertyNumeric1 ?p1 . 
%     FILTER ( ?p1 > %x% ) 
% } UNION { 
%       ?product rdfs:label ?label . 
%       ?product rdf:type %ProductType% . 
%       ?product bsbm:productFeature %ProductFeature1% . 
%       ?product bsbm:productFeature %ProductFeature3% . 
%       ?product bsbm:productPropertyNumeric2 ?p2 . 
%     FILTER ( ?p2> %y% ) }
% } 
% ORDER BY ?label 
% LIMIT 10 OFFSET 10 
% 
% ------------------------------------------------------------------------------------

set1(Product, Label) :- 
	    rdf3(Product 'rdfs:label' Label),
	    rdf3(Product 'rdf:type' '%ProductType%'), 
	    rdf3(Product 'bsbm:productFeature', '%ProductFeature1%'),
	    rdf3(Product 'bsbm:productFeature', '%ProductFeature2%'), 
	    rdf3(Product 'bsbm:productPropertyNumeric1' P1),
	    P1 > '%x%'.

set2(Product, Label) :- 
	    rdf3(Product, 'rdfs:label', Label),
	    rdf3(Product, 'rdf:type', '%ProductType%'),
	    rdf3(Product, 'bsbm:productFeature', '%ProductFeature1%'),
	    rdf3(Product, 'bsbm:productFeature', '%ProductFeature3%'),
	    rdf3(Product, 'bsbm:productPropertyNumeric2', P2),
	    P2 > '%y%'.

result(Product, Label) :-
		set1(Product, Label) ; set2(Product,Label).

result_bag_all(Bag) :- 
		bagof(result(Product,Label), result(Product,Label), BagUnsorted),	
		sortby(BagUnsorted, 2, Bag). % arg 2 is Label

result_bag(_, Offset, Limit, Counter, []) :- Counter @> Limit. 
result_bag([H|BagIn], Offset, Limit, Counter, Bagout) :- 
		Counter @>= Offset, Count @=< Limit,
		Bagout = [H|B2],
		Counter2 is Counter + 1,
		result_bag(Bagin, Offset, Limit, Counter2, B2).

query(Result) :- result_bag_all(Bag), result_bag(Bag, 10, 10, 0, Result).

% ------------------------------------------------------------------------------------
% --- QUERY #5  ----------------------------------------------------------------------
% ------------------------------------------------------------------------------------
% 
% SELECT DISTINCT ?product ?productLabel 
% WHERE {  
%     ?product rdfs:label ?productLabel . 
%     %ProductXYZ% rdf:type ?prodtype. 
%     ?product rdf:type ?prodtype . 
%   FILTER (%ProductXYZ% != ?product) 
%     %ProductXYZ% bsbm:productFeature ?prodFeature . 
%     ?product bsbm:productFeature ?prodFeature . 
%     %ProductXYZ% bsbm:productPropertyNumeric1 ?origProperty1 . 
%     ?product bsbm:productPropertyNumeric1 ?simProperty1 . 
%   FILTER (?simProperty1 < (?origProperty1 + 150) && ?simProperty1 >  
%     (?origProperty1 – 150)) 
%     %ProductXYZ% bsbm:productPropertyNumeric2 ?origProperty2 . 
%     ?product bsbm:productPropertyNumeric2 ?simProperty2 . 
%   FILTER (?simProperty2 < (?origProperty2 + 220) && ?simProperty2 >  
%     (?origProperty2 – 220)) } 
% ORDER BY ?productLabel 
% LIMIT 5 
% 
% ------------------------------------------------------------------------------------

result(Product, Label) :- 
	rdf3(Product, 'rdfs:label', Label),
    rdf3('%ProductXYZ%' 'rdf:type' Prodtype),
    rdf3(Product, 'rdf:type', Prodtype),
	'%ProductXYZ%' \== Product,
	rdf3('%ProductXYZ%' 'bsbm:productFeature' ProdFeature),
    rdf3(Product, 'bsbm:productFeature' ProdFeature),
    rdf3('%ProductXYZ%' 'bsbm:productPropertyNumeric1' OrigProperty1),
    rdf3(Product, 'bsbm:productPropertyNumeric1' SimProperty1),
    TestOrigProperty1 is OrigProperty1 + 150,
    TestOrigProperty2 is OrigProperty2 - 150,
	SimProperty1 < TestOrigProperty1,
	SimProperty1 > TestOrigProperty2,
    rdf3('%ProductXYZ%' 'bsbm:productPropertyNumeric2' OrigProperty2),
    rdf3(Product, 'bsbm:productPropertyNumeric2' SimProperty2),
    TestSimProperty1 is OrigProperty2 + 220,
    TestSimProperty2 is OrigProperty2 - 220,
  	SimProperty2 < TestSimProperty1,
  	SimProperty2 > TestSimProperty2.


%%% NOTE: This is actually more complicated than what we need, since you can only retrieve all or none distinct, setof(result) will cover it
% finds the result where the arguments given in ArgList are distinct
%% result_distinct_all(Bag, Arglist) :- 
%% 	setof(result(Product,Label), result(Product,Label), BagUnsorted),
%% 	filter_distinct(BagUnsorted, Arglist, Bagout),
%% 	sortBy(Bagout, 2, Bag).
%% 
%% filter_distinct([B|Bag], Arglist, Added) :-
%% 	% first seach the added list for B
%% 	B =.. [Head|Args],
%% 	filter_args(Args, Arglist, FArgs),
%% 	check_to_add(FArgs,Added),
%% 	A = [B|Added],
%% 	filter_distinct(Bag, ArgList, A).
%% 
%% %% return a list of only the arguments values in the index list
%% %% for instance filter_args([a,b,c,d],[1,3],X)
%% %%	X = [a,c].
%% filter_args(_, [], []).
%% filter_args(A, [I|L], [V|Out]) :-
%% 	basics:ith(I,A,V),
%% 	filter_args(A,L,Out).
%% 
%% %% check if a given value (list of filtered arg values) is contained in the list already
%% check_to_add(_, []).
%% check_to_add(A, [B|Added]) :- A \== B, check_to_add(A, Added).


%%%% THIS will work for all cases since distinct will apply to all projected variables.
result_distinct_all(Bag, Arglist) :- 
	setof(result(Product,Label), result(Product,Label), BagUnsorted),
	sortBy(BagUnsorted, 2, Bag).

% build a bag confined by limit and offset, the bag given here should already be sroted
result_bag(_, Offset, Limit, Counter, []) :- Counter @> Limit. 
result_bag([H|BagIn], Offset, Limit, Counter, Bagout) :- 
		Counter @>= Offset, Count @=< Limit,
		Bagout = [H|B2],
		Counter2 is Counter + 1,
		result_bag(Bagin, Offset, Limit, Counter2, B2).

%% compute the distinc set and limit 5 to find the result
query(Result) :- result_distinct_all(Bag,[1,2]), result_bag(Bag, 0, 5, 0, Result).

% ------------------------------------------------------------------------------------
% --- QUERY #6  ----------------------------------------------------------------------
% ------------------------------------------------------------------------------------
% 
% SELECT ?product ?label 
% WHERE { 
%     ?product rdfs:label ?label . 
%     ?product rdf:type bsbm:Product . 
%   FILTER regex(?label, "%word1%|%word2%|%word3%")} 
% 
% ------------------------------------------------------------------------------------

result(Product, Label) :-
	rdf3(?product rdfs:label ?label),
    rdf3(?product rdf:type bsbm:Product),
    regex(?label, "%word1%|%word2%|%word3%").

%% employs the prolog pcre library to handle the heavy lifting for matching
regex(Value, Expression) :- 
	pcre:match(Expression, Value, MatchList, one),
	MatchList \== [].

query(Result) :- bagof(result(Product,Label), result(Product,Label), Result).

% ------------------------------------------------------------------------------------
% ------------------------------------------------------------------------------------
% ------------------------------------------------------------------------------------



